// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/constraint;
import ballerina/data.jsondata;
import ballerina/http;

# Represents the Queries record for the operation: getCustomerHoldings
public type GetCustomerHoldingsQueries record {
    # Contains the identifier specific to the holding details of the customer
    string holdingsId?;
    # Flag to fetch the preferred holding details (JWT required)
    string getPreferredHoldings?;
    # The record from which the response should be displayed
    @http:Query {name: "page_start"}
    int:Signed32 pageStart?;
    # Unique id expected to get as part of response from Transact on every enquiry request
    @http:Query {name: "page_token"}
    string pageToken?;
    # Contains the types of customer holdings
    string holdingsType?;
    # The total number of records per page
    @http:Query {name: "page_size"}
    int:Signed32 pageSize?;
};

public type CustomerHoldingsResponseBodyInner_customerIds record {
    # Identifier of the customer
    @constraint:String {maxLength: 100}
    string customerId?;
    # Indicates role of a customer for an arrangement.
    string customerRole?;
    # Indicates the type of role of a customer
    string roleDisplayName?;
    # Indicates the customer who is the legal owner of the arrangement and is the responsible customer of the contract with bank.
    string beneficialOwner?;
};

# CustomerHoldingsResponse
public type CustomerHoldingsResponse record {
    QueryHeader header?;
    CustomerHoldingsResponseBody body?;
};

# Represents the Headers record for the operation: getHoldings
public type GetHoldingsHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Indicates the pagination header attributes availability. If set to 'true', it fetches all the data
    boolean disablePagination?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type QueryHeader record {
    QueryHeaderAudit audit?;
    # The record from which the response should be displayed
    @jsondata:Name {value: "page_start"}
    int:Signed32 pageStart?;
    # The total number of records present
    @jsondata:Name {value: "total_size"}
    int:Signed32 totalSize?;
    # Unique id expected to get as part of response from Transact on every enquiry request
    @jsondata:Name {value: "page_token"}
    string pageToken?;
    # Status of the API(success/failed)
    string status?;
    # The total number of records per page
    @jsondata:Name {value: "page_size"}
    int:Signed32 pageSize?;
};

public type CustomerHoldingsResponseBody CustomerHoldingsResponseBodyInner[];

public type CustomerHoldingsResponseBodyInner_paymentTemplates record {
    # Contains the template used for payment transactions
    string paymentTemplate?;
};

# Represents the Queries record for the operation: getHoldings
public type GetHoldingsQueries record {
    # Contains the identifier specific to the holding details of the customer
    string holdingsId?;
    # Flag to fetch the preferred holding details (JWT required)
    string getPreferredHoldings?;
    # The record from which the response should be displayed
    @http:Query {name: "page_start"}
    int:Signed32 pageStart?;
    # Identifier of the customer
    string customerId?;
    # Unique id expected to get as part of response from Transact on every enquiry request
    @http:Query {name: "page_token"}
    string pageToken?;
    # Contains the types of customer holdings
    string holdingsType?;
    # The total number of records per page
    @http:Query {name: "page_size"}
    int:Signed32 pageSize?;
};

public type CustomerHoldingsResponseBodyInner record {
    # Contains the final balances of all the external accounts
    string totalExtAccountBalances?;
    # Indicates the extension data
    record {} extensions?;
    # Contains the final balances of all deposit accounts after all transactions have taken place
    decimal totalDepositBalances?;
    # Contains the final balances of all accounts after all transactions have taken place
    decimal totalAccountBalances?;
    # Contains the final balances of all loans after all payments have taken place
    decimal totalLoanBalances?;
    # Contains the unique identifier of the product, e.g. the product id of the arrangement account
    CustomerHoldingsResponseBodyInner_products[] products?;
    # The top level product line, which the product is ultimately attached to. May be a Temenos-defined product line such as ACCOUNTS, AGENT, BUNDLE, CONSENT, DEPOSITS, LENDING, REWARDS, etc. or one defined by the institution to manage external products
    string productLineId?;
};

public type QueryHeaderAudit record {
    # Time taken to response by Transact
    @jsondata:Name {value: "T24_time"}
    int:Signed32 t24Time?;
    # Time taken to parse the response by IRIS
    @jsondata:Name {value: "responseParse_time"}
    decimal responseParseTime?;
    # The CURR.NO. of the record
    string versionNumber?;
    # Time taken to parse the request by IRIS
    @jsondata:Name {value: "requestParse_time"}
    decimal requestParseTime?;
};

public type CustomerHoldingsResponseBodyInner_products record {
    # Description of the product line, e.g. Client Consent for product line CONSENT.
    string productLineName?;
    # Indicates an unique identifier of an account
    string arrangementId?;
    # The group, as defined by the institution, that the product belongs to.
    string productGroupId?;
    # Description of the product group
    string productGroupName?;
    # Contains the unique identifier of the product, e.g. the product id of the arrangement account.
    string productId?;
    # Indicates the description of the Product
    string productDescription?;
    # Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN & BBAN
    string accountId?;
    # Contains the short title given to the name of an account or an arrangement
    string shortTitle?;
    # Unique identifier associated with the product name of the account or contract. For example: For customer/counterparty accounts, the identifier would be in the range 1000 to 9999. For ledger accounts, in the range 10000 to 19999.
    string categoryId?;
    # The identifier of the underlying Entity/Company/Branch.
    string companyCode?;
    # Identifier of the currency. This is the 3-letter ISO 4217 code of the currency.
    string currencyId?;
    # Contains bank sort code or iban branch identifier for the account
    string sortCode?;
    # Represents the International Bank Account Number (IBAN) of the account.  E.g. GB29 NWBK 6016 1331 9268 19
    string accountIBAN?;
    # Real-time balance including all authorised transactions posted against the account and, unless it is a nostro or internal account, unauthorised debit entries.
    decimal workingBalance?;
    # Date on which the credit facility application is opened
    string openingDate?;
    # The company in which payment is processed
    string companyName?;
    # Indicates the preferred product of the arrangement contract. This is required for only new arrangements and product change is not permitted
    string preferredProduct?;
    # Indicates to position of the preferred product of the arrangement contract. This is required for only new arrangements and product change is not permitted
    string preferredProductPosition?;
    # Indicates the label of the Preferred Product of the Arrangement contract. This is required for only new arrangements and product change is not permitted
    string preferredProductLabel?;
    # The act of permitting, especially in giving formal consent to access a particular file or repository.
    string permission?;
    # Real-time balance including all authorised transactions posted against the account, excluding any entries with a future processing date.
    decimal onlineActualBalance?;
    # Available balance of the account which is the projected balance which includes the net movements of both debits and credits against the account.
    decimal availableBalance?;
    # Contains the maximum amount available to be drawn
    decimal|string availableBalanceWithLimit?;
    # Contains the aggregate outstanding principal amount thereof after giving effect to any borrowings and prepayments or repayments of Committed Loans
    decimal outstandingAmount?;
    # The amount paid out.
    decimal paidOutAmount?;
    # Status of the arrangement. E.g. AUTH, CLOSE, UNAUTH etc.
    string arrangementStatus?;
    # Contains the amount borrowed or the part of the amount borrowed which remains unpaid
    decimal totalPrincipal?;
    # The reference which is provided to the beneficiary/ creditor by the originator of payment
    string customerReference?;
    # Contains the details of account statement first cycle. It includes addon, participant account, lead account, print type, print attribute name, print attribute value, etc.
    string statement?;
    # Id of the portfolio or security account
    string portfolioId?;
    # The unique identifier to specify an arrangement reference which is act as a Master for the arrangement being created.
    string masterArrangementId?;
    # The sub-account that the security position is held in.
    string subAccount?;
    # Identifies the credit limit reference for the underlying account.
    string limitReference?;
    # Specifies the operative status of the acount like inactive, dormant,unclaimed etc.,
    string dormancyStatus?;
    # Used to define the attributes needed for product creation. For example, line Of business, organisation and branch, etc
    string productAttribute?;
    # Contains the id associated to the connect reference respective to a transaction of the account
    string connectionId?;
    # Contains the last updated balances details
    string balancesLastUpdated?;
    # Contains the list of last updated transactions
    string transactionsLastUpdated?;
    # Indicates the logo of the bank
    string bankLogo?;
    # Contains the name of the external source provider for the customer
    string extSourceProvider?;
    # Identifier of the customer
    string customerId?;
    # Contains the connection status of the transaction
    string connectionStatus?;
    # Contains the connection sub status of the transaction
    string connectionSubStatus?;
    # Denotes the next refresh time
    string nextRefreshAvailableAt?;
    # Contains the swift reference of the account
    string acctSwiftRef?;
    # Denotes the external account number
    string extAccountNumber?;
    # Total funds available in the account after all the ongoing transactions have been completed
    string availableFunds?;
    # Identifier of the customer
    CustomerHoldingsResponseBodyInner_customerIds[] customerIds?;
    # Contains the templates used for payment transactions
    CustomerHoldingsResponseBodyInner_paymentTemplates[] paymentTemplates?;
};

# Provides API key configurations needed when communicating with a remote HTTP endpoint.
public type ApiKeysConfig record {|
    string apikey;
|};

# Represents the Headers record for the operation: getCustomerHoldings
public type GetCustomerHoldingsHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Indicates the pagination header attributes availability. If set to 'true', it fetches all the data
    boolean disablePagination?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Provides Auth configurations needed when communicating with a remote HTTP endpoint.
    http:CredentialsConfig|ApiKeysConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    http:ClientHttp1Settings http1Settings = {};
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings = {};
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 30;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with Redirection
    http:FollowRedirects followRedirects?;
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache = {};
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with cookies
    http:CookieConfig cookieConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits = {};
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Provides settings related to client socket configuration
    http:ClientSocketConfig socketConfig = {};
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
    # Enables relaxed data binding on the client side. When enabled, `nil` values are treated as optional, 
    # and absent fields are handled as `nilable` types. Enabled by default.
    boolean laxDataBinding = true;
|};
